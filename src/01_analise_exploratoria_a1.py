# -*- coding: utf-8 -*-
"""01-analise-exploratoria-a1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1suaBREaSsd6nBagOnZKgWoJWrJCSh3IY

# **Produtos mais vendidos e suas avaliações: A relação entre preço, popularidade e qualidade.**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""## Dataset utilizado para a análise exploratória:


"""

df = pd.read_csv('sample_data/amazon.csv')
display(df)

"""### Número de Exemplares (Linhas) e Dimensões (Colunas):

"""

# Exibindo o número de linhas e colunas:
l, c = df.shape
print(f'O dataframe apresenta {l} linhas {c} colunas')

"""### Tipos de dados contidos no dataframe:

"""

# Exibir os tipos de dados de cada coluna
print(df.dtypes)

"""Tipos de dado "object" é um conjunto de chaves e valores, por exemplo: Discounted_price '₹199' não possui apenas valores numéricos, contém o símbolo da moeda '₹'. Tornando-se, assim, um objeto.

### Valores perdidos ou incorretos:
Identificar valores nulos e incorretos e fazer a limpeza dos dados. Os símbolos de moeda, vírgulas em números, porcentagens e outros caracteres são comuns em datasets e precisam ser removidos para fazer a análise dos dados corretamente como valores numéricos.
"""

# Limpar rating_count (remover vírgulas e converter para int)
# Limpar rating_count (remover vírgulas e converter para int)
df['rating_count'] = df['rating_count'].replace(',', '', regex=True).astype(float) # First convert to float
df['rating_count'] = df['rating_count'].fillna(0).astype(int) # Fill NaN with 0 and convert to int





# Função de limpeza que remove caracteres não numéricos e converte para float
def clean_price_column(column):
    return column.replace(r'[^0-9.]', '', regex=True).astype(float)

# Limpar discounted_price e actual_price (remover símbolos de moeda, vírgulas)
df['discounted_price'] = clean_price_column(df['discounted_price'])
df['actual_price'] = clean_price_column(df['actual_price'])

# Limpar discount_percentage (remover o símbolo % e converter para float)
df['discount_percentage'] = df['discount_percentage'].replace(r'[^0-9.]', '', regex=True).astype(float)

# Limpar rating_count (remover vírgulas e converter para int)
df['rating_count'] = df['rating_count'].replace(r'[^0-9]', '', regex=True).astype(int)

# Verificar o resultado da limpeza
print(df[['discounted_price', 'actual_price', 'discount_percentage', 'rating_count']].head())

# Passo 3: Verificar os dados após a limpeza completa
print(df.isnull().sum())  # Verificar se ainda há valores nulos
display(df)


df = df.dropna(subset=['rating', 'rating_count', 'discounted_price'])
df = df.drop_duplicates()
display(df)

"""Agora vamos verificar novamente os tipos de dados do dataframe:"""

# Tipos de dados transformados:
print(df.dtypes)

"""### Medidas de posição:
As principais medidas de posição são as de tendência central: média, mediana e moda e as separatrizes: quartis, decis e percentis.

**A Média tem como função medir a tendência central de um conjunto de dados:**
"""

# Média
media_actual_price = df['actual_price'].mean()
media_discounted_price = df['discounted_price'].mean()
media_discount_percentage = df['discount_percentage'].mean()
media_rating = df['rating'].mean()
media_rating_count = df['rating_count'].mean()
print(f'Média do preço real: {media_actual_price:.2f}')
print(f'Média do preço com desconto: {media_discounted_price:.2f}')
print(f'Média da porcentagem de desconto: {media_discount_percentage:.2f}')
print(f'Média da avaliação: {media_rating:.2f}')
print(f'Média do número de avaliações: {media_rating_count:.2f}')

"""Serve, por exemplo, para comparar de diferentes conjuntos de dados, identificar tendências ao longo do tempo e para análises estatísticas. A média é mais representativa quando os dados têm uma distribuição simétrica e não contêm outliers significativos.

**A Mediana é uma medida de tendência central que representa o valor que divide um conjunto de dados em duas partes iguais.**
"""

# Mediana
mediana_actual_price = df['actual_price'].median()
mediana_discounted_price = df['discounted_price'].median()
mediana_discount_percentage = df['discount_percentage'].median()
mediana_rating = df['rating'].median()
mediana_rating_count = df['rating_count'].median() # Changed 'ranting_count' to 'rating_count'
print(f'Mediana do preço real: {mediana_actual_price:.2f}')
print(f'Mediana do preço com desconto: {mediana_discounted_price:.2f}')
print(f'Mediana da porcentagem de desconto: {mediana_discount_percentage:.2f}')
print(f'Mediana da avaliação: {mediana_rating:.2f}')
print(f'Mediana do número de avaliações: {mediana_rating_count:.2f}')

"""A Mediana tem foco em análises mais descritivas e não é afetada por outliers (valores muito altos ou muito baixos), tornando-se eficiente quando os dados possuem distribuições assimétricas.

**A moda é uma medida de tendência central que representa o valor ou os valores que aparecem com mais frequência em um conjunto de dados.**
"""

# Moda
moda_actual_price = df['actual_price'].mode()[0]  # A moda pode ter mais de um valor, pegar o primeiro
moda_discounted_price = df['discounted_price'].mode()[0]
moda_discount_percentage = df['discount_percentage'].mode()[0]
moda_rating = df['rating'].mode()[0]
moda_rating_count = df['rating_count'].mode()[0]
print(f'Moda do preço real: {moda_actual_price:.2f}')
print(f'Moda do preço com desconto: {moda_discounted_price:.2f}')
print(f'Moda da porcentagem de desconto: {moda_discount_percentage:.2f}')
print(f'Moda da avaliação: {moda_rating:.2f}')
print(f'Moda do número de avaliações: {moda_rating_count:.2f}')

"""**Os quartis são valores que dividem uma amostra de dados em quatro partes iguais.**"""

# Quartis
quartis_actual_price = df['actual_price'].quantile([0.25, 0.5, 0.75])
quartis_discounted_price = df['discounted_price'].quantile([0.25, 0.5, 0.75])
quartis_discount_percentage = df['discount_percentage'].quantile([0.25, 0.5, 0.75])
quartis_ranting = df['rating'].quantile([0.25, 0.5, 0.75])
quartis_rating_count = df['rating_count'].quantile([0.25, 0.5, 0.75])
print(f'Quartis do preço real:\n{quartis_actual_price}')
print(f'Quartis do preço com desconto:\n{quartis_discounted_price}')
print(f'Quartis da porcentagem de desconto:\n{quartis_discount_percentage}')
print(f'Quartis da avaliação:\n{quartis_ranting}')
print(f'Quartis do número de avaliações:\n{quartis_rating_count}')

"""Os quartis ajudam a identificar a variação entre o menor e o maior valor do conjuntos de dados, e a na identificação de outliers. É importante observar que a diferença entre o Q1 e o Q3, é chamada de intervalo interquartil (IQR) e que o Q2 (0.5) é a mediana.

**Decis dividem um conjunto de dados em dez partes iguais. Assim, cada decis representa 10% dos dados**
"""

# Decis
decis_actual_price = df['actual_price'].quantile([0.1 * i for i in range(1, 11)])
decis_discounted_price = df['discounted_price'].quantile([0.1 * i for i in range(1, 11)])
decis_discount_percentage = df['discount_percentage'].quantile([0.1 * i for i in range(1, 11)])
decis_rating = df['rating'].quantile([0.1 * i for i in range(1, 11)])
decis_rating_count = df['rating_count'].quantile([0.1 * i for i in range(1, 11)])
print(f'Decis do preço real:\n{decis_actual_price}')
print(f'Decis do preço com desconto:\n{decis_discounted_price}')
print(f'Decis da porcentagem de desconto:\n{decis_discount_percentage}')
print(f'Decis da avaliação:\n{decis_rating}')
print(f'Decis do número de avaliações:\n{decis_rating_count}')

"""Os decis são úteis para entender a posição relativa de um valor em relação a um conjunto maior.

**Os percentis dividem um conjunto de dados em cem partes iguais.**
"""

# Percentis
# Exemplo 90 º percentil
percentil_90_actual_price = df['actual_price'].quantile(0.90)
percentil_90_discounted_price = df['discounted_price'].quantile(0.90)
percentil_90_discount_percentage = df['discount_percentage'].quantile(0.90)
percentil_90_rating = df['rating'].quantile(0.90)
percentil_90_rating_count = df['rating_count'].quantile(0.90)
print(f'90º percentil do preço real: {percentil_90_actual_price}')
print(f'90º percentil do preço com desconto: {percentil_90_discounted_price}')
print(f'90º percentil da porcentagem de desconto: {percentil_90_discount_percentage}')
print(f'90º percentil da avaliação: {percentil_90_rating}')
print(f'90º percentil do número de avaliações: {percentil_90_rating_count:.2f}')

"""Cada percentil indica a posição de um dado em relação aos demais.

### Medidas de dispersão:
Absoluta: variância, desvio e amplitude.
Relativa: Coeficiente de variação.

**A variância mede a dispersão dos dados em relação à média.**
"""

# variância
variancia_actual_price = df['actual_price'].var()
variancia_discounted_price = df['discounted_price'].var()
variancia_discount_percentage = df['discount_percentage'].var()
variancia_rating = df['rating'].var()
variancia_rating_count = df['rating_count'].var()
print(f'A variância do preço real é: {variancia_actual_price:.2f}')
print(f'A variância do preço com desconto é: {variancia_discounted_price:.2f}')
print(f'A variância da porcentagem de desconto é: {variancia_discount_percentage:.2f}')
print(f'A variância da avaliação é: {variancia_rating:.2f}')
print(f'A variância do número de avaliações é: {variancia_rating_count:.2f}')

"""**O desvio padrão é a raiz quadrada da variância e mede a variabilidade ou a dispersão dos dados.**"""

# desvio padrão
desvio_padrao_actual_price = df['actual_price'].std()
desvio_padrao_discounted_price = df['discounted_price'].std()
desvio_padrao_discount_percentage = df['discount_percentage'].std()
desvio_padrao_rating = df['rating'].std()
desvio_padrao_rating_count = df['rating_count'].std()
print(f'O desvio padrão do preço real é: {desvio_padrao_actual_price:.2f}')
print(f'O desvio padrão do preço com desconto é: {desvio_padrao_discounted_price:.2f}')
print(f'O desvio padrão da porcentagem de desconto é: {desvio_padrao_discount_percentage:.2f}')
print(f'O desvio padrão da avaliação é: {desvio_padrao_rating:.2f}')
print(f'O desvio padrão do número de avaliações é: {desvio_padrao_rating_count:.2f}')

"""**A Amplitude é a diferença entre o valor máximo e o valor mínimo.**"""

# Amplitude
amplitude_actual_price = df['actual_price'].max() - df['actual_price'].min()
amplitude_discounted_price = df['discounted_price'].max() - df['discounted_price'].min()
amplitude_discount_percentage = df['discount_percentage'].max() - df['discount_percentage'].min()
amplitude_rating = df['rating'].max() - df['rating'].min()
amplitude_rating_count = df['rating_count'].max() - df['rating_count'].min()
print(f'A amplitude do preço real é: {amplitude_actual_price:.2f}')
print(f'A amplitude do preço com desconto é: {amplitude_discounted_price:.2f}')
print(f'A amplitude da porcentagem de desconto é: {amplitude_discount_percentage:.2f}')
print(f'A amplitude da avaliação é: {amplitude_rating:.2f}')
print(f'A amplitude do número de avaliações é: {amplitude_rating_count:.2f}')

"""### Distribuição e Frequência:
Gráficos de distribuição para as variáveis numéricas.

**Histogramas:**
"""

# ajuda a visualizar a distribuição e frequência dos dados.
plt.figure(figsize=(10, 10))

plt.subplot(3, 2, 1)
plt.hist(df['actual_price'], bins=40, color='lightblue', alpha=0.7)
plt.title('Distribuição do Preço real')
plt.xlabel('Preço real')
plt.ylabel('Frequência')

plt.subplot(3, 2, 2)
plt.hist(df['discounted_price'], bins=30, alpha=0.7, color='blue')
plt.title('Distribuição do Preço Descontado')
plt.xlabel('Preço Descontado')
plt.ylabel('Frequência')

plt.subplot(3, 2, 3)
plt.hist(df['discount_percentage'], bins=30, color='purple', alpha=0.7)
plt.title('Distribuição da Percentagem de Desconto')
plt.xlabel('Percentagem de Desconto')
plt.ylabel('Frequência')

plt.subplot(3, 2, 4)
plt.hist(df['rating'], bins=40, alpha=0.7, color='red')
plt.title('Distribuição das Avaliações')
plt.xlabel('Avaliação')
plt.ylabel('Frequência')

plt.subplot(3, 2, 5)
plt.hist(df['rating_count'], bins=40, color='darkred', alpha=0.7)
plt.title('Distribuição da Contagem de Avaliações')
plt.xlabel('Contagem de Avaliações')
plt.ylabel('Frequência')

plt.tight_layout()
plt.show()

"""**Boxplot:**"""

# ajudar a visualizar a mediana, quartis e outliers.
plt.figure(figsize=(10, 10))

plt.subplot(3, 2, 1)
plt.boxplot(df['actual_price'])
plt.title('Boxplot do Preço real')
plt.ylabel('Preço Real')

plt.subplot(3, 2, 2)
plt.boxplot(df['discounted_price'])
plt.title('Boxplot do Preço Descontado')
plt.ylabel('Preço Descontado')

plt.subplot(3, 2, 3)
plt.boxplot(df['discount_percentage'])
plt.title('Boxplot da Percentagem de Desconto')
plt.ylabel('Percentagem de Desconto')

plt.subplot(3, 2, 4)
plt.boxplot(df['rating'])
plt.title('Boxplot das Avaliações')
plt.ylabel('Avaliação')

plt.subplot(3, 2, 5)
plt.boxplot(df['rating_count'])
plt.title('Boxplot da Contagem de Avaliações')
plt.ylabel('Contagem de Avaliações')

plt.tight_layout()
plt.show()

"""**Gráficos de dispersão:**

São usado para analisar a relação entre duas variáveis.
"""

plt.figure(figsize=(10, 10))

# Relação entre preço e avaliação
plt.subplot(1,2,1)
plt.scatter(df['actual_price'], df['rating'], alpha=0.5)
plt.title('Relação entre Preço real e Avaliações')
plt.xlabel('Preço real')
plt.ylabel('Avaliação')

# Relação entre preço descontado e avaliação
plt.subplot(1,2,2)
plt.scatter(df['discounted_price'], df['rating'], alpha=0.5)
plt.title('Relação entre Preço Descontado e Avaliações')
plt.xlabel('Preço Descontado')
plt.ylabel('Avaliação')

plt.tight_layout()
plt.show()

# Relação entre desconto (discounted_price) e vendas (usamos o 'ranting_count' como proxy de vendas)

plt.scatter(df['discounted_price'], df['rating_count'], alpha=0.5)
plt.title('Relação entre Preço Descontado e Vendas')
plt.xlabel('Preço Descontado')
plt.ylabel('Vendas')
plt.show()

"""### Correlações:
Determinar qual é a intensidade da relação que existe entre as variáveis no conjunto de dados.
"""

# Correlação entre preço descontado, avaliação e contagem de avaliações:
corr_discount_ranting_rcount = df[['discounted_price', 'rating', 'rating_count']].corr()
print(corr_discount_ranting_rcount)

# mapa de calor:
sns.heatmap(corr_discount_ranting_rcount, annot=True, cmap='coolwarm')
plt.title('Mapa de Calor das Correlações')
plt.show()

# Correlação entre percentagem de desconto, avaliação e contagem de avaliações:
corr_percentage_ranting_rcount = df[['discount_percentage', 'rating', 'rating_count']].corr()
print(corr_percentage_ranting_rcount)

# mapa de calor:
sns.heatmap(corr_percentage_ranting_rcount, annot=True, cmap='coolwarm')
plt.title('Mapa de Calor das Correlações')
plt.show()

"""### Anomalias e Outliers:
Identificar dados que se diferenciam drasticamente de todos os outros
"""

# Outliers em preço real:
# Calcular os quartis e IQR
Q1 = df['actual_price'].quantile(0.25)
Q3 = df['actual_price'].quantile(0.75)
IQR = Q3 - Q1

# Definir os limites para outliers
limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

# Identificar outliers
outliers_actual_price = df[(df['actual_price'] < limite_inferior) | (df['actual_price'] > limite_superior)]

# Exibir os outliers encontrados
print("Outliers em 'actual_price':")
print(outliers_actual_price['actual_price'])

# Outliers em preço descontado:

Q1 = df['discounted_price'].quantile(0.25)
Q3 = df['discounted_price'].quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers_discounted_price = df[(df['discounted_price'] < limite_inferior) | (df['discounted_price'] > limite_superior)]

print("Outliers em 'discounted_price':")
print(outliers_discounted_price['discounted_price'])

# Outliers em percentagem de desconto:
Q1 = df['discount_percentage'].quantile(0.25)
Q3 = df['discount_percentage'].quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers_discount_percentage = df[(df['discount_percentage'] < limite_inferior) | (df['discount_percentage'] > limite_superior)]

print("Outliers em 'discount_percentage':")
print(outliers_discount_percentage['discount_percentage'])

# Outliers em Avaliações:
Q1 = df['rating'].quantile(0.25)
Q3 = df['rating'].quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers_rating = df[(df['rating'] < limite_inferior) | (df['rating'] > limite_superior)]

print("Outliers em 'rating':")
print(outliers_rating['rating'])

# Outliers em contagem de avaliações:
Q1 = df['rating_count'].quantile(0.25)
Q3 = df['rating_count'].quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers_rating_count = df[(df['rating_count'] < limite_inferior) | (df['rating_count'] > limite_superior)]

print("Outliers em 'rating_count':")
print(outliers_rating_count['rating_count'])

"""### Correlações nos conjuntos de dados desconsiderando os outliers

"""

# Obtendo todos os índices dos outliers
outliers_indices = pd.concat([
    outliers_actual_price,
    outliers_discounted_price,
    outliers_discount_percentage,
    outliers_rating,
    outliers_rating_count
]).index.drop_duplicates()

# Criando um DataFrame sem os outliers identificados
df_sem_outliers = df.drop(index=outliers_indices)

# Calculando correlação entre actual_price, rating e rating_count (sem outliers)
correlacao_actual_price = df_sem_outliers[['actual_price', 'rating', 'rating_count']].corr()
print("Correlação entre actual_price, rating e rating_count (sem outliers):")
print(correlacao_actual_price)

# mapa de calor:
sns.heatmap(correlacao_actual_price, annot=True, cmap='coolwarm')
plt.title('Mapa de Calor das Correlações sem outliers')
plt.show()

# Calculando correlação entre discounted_price, rating e rating_count (sem outliers)
correlacao_discounted_price = df_sem_outliers[['discounted_price', 'rating', 'rating_count']].corr()
print("\nCorrelação entre discounted_price, rating e rating_count (sem outliers):")
print(correlacao_discounted_price)

# mapa de calor:
sns.heatmap(correlacao_discounted_price, annot=True, cmap='coolwarm')
plt.title('Mapa de Calor das Correlações sem outliers')
plt.show()

"""### Top 10 produtos mais vendidos:

"""

# Filtrando produtos mais vendidos (considerando rating_count como proxy de vendas)
top_selling = df.sort_values(by='rating_count', ascending=False).head(10)

# Comparando
top_selling['good_rating'] = top_selling['rating'] >= 4.0
print(top_selling[['product_name', 'rating', 'rating_count', 'good_rating']])

print(top_selling[['product_name', 'rating', 'rating_count', 'good_rating', 'discount_percentage']])